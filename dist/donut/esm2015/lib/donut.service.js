import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DonutService {
    constructor() {
    }
    getProcessedData(donutData) {
        this.sum = this.fetchSum(donutData);
        donutData = this.calculatePercentages(donutData, this.sum);
        donutData = this.calculateDashArrays(donutData);
        donutData = this.getOffsets(donutData);
        return donutData;
    }
    calculateDashArrays(donutData) {
        donutData.forEach(data => {
            data.strokeDasharray = this.getDasharrayString(data.percentage);
        });
        return donutData;
    }
    calculatePercentages(donutData, sum) {
        donutData.forEach(data => {
            data.percentage = this.getRoundedPercentage(parseInt(data.value), sum);
        });
        return donutData;
    }
    fetchSum(donutData) {
        return donutData.map(d => parseInt(d.value)).reduce((a, b) => a + b, 0);
    }
    getRoundedPercentage(numerator, denominator) {
        if (!denominator) {
            return 0;
        }
        return (Math.round(((numerator / denominator) * 100) * 10) / 10);
    }
    getDasharrayString(dash) {
        return dash + ' ' + (100 - dash);
    }
    getOffsets(donutData) {
        let firstOffset = 0;
        let sumTillNow = 0;
        donutData.forEach((data, i) => {
            if (i === 0) {
                data.strokeOffset = 0;
                sumTillNow = data.percentage;
            }
            else {
                data.strokeOffset = 100 - sumTillNow;
                sumTillNow += data.percentage;
            }
        });
        return donutData;
    }
}
DonutService.ɵfac = function DonutService_Factory(t) { return new (t || DonutService)(); };
DonutService.ɵprov = i0.ɵɵdefineInjectable({ token: DonutService, factory: DonutService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DonutService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9udXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RvbnV0LyIsInNvdXJjZXMiOlsibGliL2RvbnV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLFlBQVk7SUFHdkI7SUFBZ0IsQ0FBQztJQUVWLGdCQUFnQixDQUFDLFNBQWtCO1FBQ3hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsU0FBUyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRCxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBR08sbUJBQW1CLENBQUMsU0FBa0I7UUFDNUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sb0JBQW9CLENBQUMsU0FBa0IsRUFBRSxHQUFXO1FBQzFELFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6RSxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFTyxRQUFRLENBQUMsU0FBa0I7UUFDakMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFNBQWlCLEVBQUUsV0FBbUI7UUFDakUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU8sa0JBQWtCLENBQUMsSUFBWTtRQUNyQyxPQUFPLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxTQUFrQjtRQUNuQyxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO2dCQUN0QixVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUM7Z0JBQ3JDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO2FBRS9CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzt3RUF6RFUsWUFBWTtvREFBWixZQUFZLFdBQVosWUFBWSxtQkFGWCxNQUFNO2tEQUVQLFlBQVk7Y0FIeEIsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9udXQgfSBmcm9tICcuL2RvbnV0Lm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRG9udXRTZXJ2aWNlIHtcblxuICBwdWJsaWMgc3VtOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljIGdldFByb2Nlc3NlZERhdGEoZG9udXREYXRhOiBEb251dFtdKTogRG9udXRbXSB7XG4gICAgdGhpcy5zdW0gPSB0aGlzLmZldGNoU3VtKGRvbnV0RGF0YSk7XG4gICAgZG9udXREYXRhID0gdGhpcy5jYWxjdWxhdGVQZXJjZW50YWdlcyhkb251dERhdGEsIHRoaXMuc3VtKTtcbiAgICBkb251dERhdGEgPSB0aGlzLmNhbGN1bGF0ZURhc2hBcnJheXMoZG9udXREYXRhKTtcbiAgICBkb251dERhdGEgPSB0aGlzLmdldE9mZnNldHMoZG9udXREYXRhKTtcbiAgICByZXR1cm4gZG9udXREYXRhO1xuICB9XG5cblxuICBwcml2YXRlIGNhbGN1bGF0ZURhc2hBcnJheXMoZG9udXREYXRhOiBEb251dFtdKTogRG9udXRbXSB7XG4gICAgZG9udXREYXRhLmZvckVhY2goZGF0YSA9PiB7XG4gICAgICBkYXRhLnN0cm9rZURhc2hhcnJheSA9IHRoaXMuZ2V0RGFzaGFycmF5U3RyaW5nKGRhdGEucGVyY2VudGFnZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnV0RGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUGVyY2VudGFnZXMoZG9udXREYXRhOiBEb251dFtdLCBzdW06IG51bWJlcik6IERvbnV0W10ge1xuICAgIGRvbnV0RGF0YS5mb3JFYWNoKGRhdGEgPT4ge1xuICAgICAgZGF0YS5wZXJjZW50YWdlID0gdGhpcy5nZXRSb3VuZGVkUGVyY2VudGFnZShwYXJzZUludChkYXRhLnZhbHVlKSwgc3VtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9udXREYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaFN1bShkb251dERhdGE6IERvbnV0W10pOiBudW1iZXIge1xuICAgIHJldHVybiBkb251dERhdGEubWFwKGQgPT4gcGFyc2VJbnQoZC52YWx1ZSkpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSb3VuZGVkUGVyY2VudGFnZShudW1lcmF0b3I6IG51bWJlciwgZGVub21pbmF0b3I6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKCFkZW5vbWluYXRvcikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAoTWF0aC5yb3VuZCgoKG51bWVyYXRvciAvIGRlbm9taW5hdG9yKSAqIDEwMCkgKiAxMCkgLyAxMCk7XG4gIH1cblxuICBwcml2YXRlIGdldERhc2hhcnJheVN0cmluZyhkYXNoOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXNoICsgJyAnICsgKDEwMCAtIGRhc2gpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPZmZzZXRzKGRvbnV0RGF0YTogRG9udXRbXSk6IERvbnV0W10ge1xuICAgIGxldCBmaXJzdE9mZnNldCA9IDA7XG4gICAgbGV0IHN1bVRpbGxOb3cgPSAwO1xuICAgIGRvbnV0RGF0YS5mb3JFYWNoKChkYXRhLCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICBkYXRhLnN0cm9rZU9mZnNldCA9IDA7XG4gICAgICAgIHN1bVRpbGxOb3cgPSBkYXRhLnBlcmNlbnRhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLnN0cm9rZU9mZnNldCA9IDEwMCAtIHN1bVRpbGxOb3c7XG4gICAgICAgIHN1bVRpbGxOb3cgKz0gZGF0YS5wZXJjZW50YWdlO1xuXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnV0RGF0YTtcbiAgfVxufVxuIl19