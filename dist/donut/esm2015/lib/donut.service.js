import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
let DonutService = class DonutService {
    constructor() {
    }
    getProcessedData(donutData) {
        this.sum = this.fetchSum(donutData);
        donutData = this.calculatePercentages(donutData, this.sum);
        donutData = this.calculateDashArrays(donutData);
        donutData = this.getOffsets(donutData);
        return donutData;
    }
    calculateDashArrays(donutData) {
        donutData.forEach(data => {
            data.strokeDasharray = this.getDasharrayString(data.percentage);
        });
        return donutData;
    }
    calculatePercentages(donutData, sum) {
        donutData.forEach(data => {
            data.percentage = this.getRoundedPercentage(parseInt(data.value), sum);
        });
        return donutData;
    }
    fetchSum(donutData) {
        return donutData.map(d => parseInt(d.value)).reduce((a, b) => a + b, 0);
    }
    getRoundedPercentage(numerator, denominator) {
        if (!denominator) {
            return 0;
        }
        return (Math.round(((numerator / denominator) * 100) * 10) / 10);
    }
    getDasharrayString(dash) {
        return dash + ' ' + (100 - dash);
    }
    getOffsets(donutData) {
        let firstOffset = 0;
        let sumTillNow = 0;
        donutData.forEach((data, i) => {
            if (i === 0) {
                data.strokeOffset = 0;
                sumTillNow = data.percentage;
            }
            else {
                data.strokeOffset = 100 - sumTillNow;
                sumTillNow += data.percentage;
            }
        });
        return donutData;
    }
};
DonutService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DonutService_Factory() { return new DonutService(); }, token: DonutService, providedIn: "root" });
DonutService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], DonutService);
export { DonutService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9udXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZy1kb251dC8iLCJzb3VyY2VzIjpbImxpYi9kb251dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBR3ZCO0lBQWdCLENBQUM7SUFFVixnQkFBZ0IsQ0FBQyxTQUFrQjtRQUN4QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsU0FBUyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNELFNBQVMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkMsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUdPLG1CQUFtQixDQUFDLFNBQWtCO1FBQzVDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFNBQWtCLEVBQUUsR0FBVztRQUMxRCxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sUUFBUSxDQUFDLFNBQWtCO1FBQ2pDLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxTQUFpQixFQUFFLFdBQW1CO1FBQ2pFLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVPLGtCQUFrQixDQUFDLElBQVk7UUFDckMsT0FBTyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxVQUFVLENBQUMsU0FBa0I7UUFDbkMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztnQkFDdEIsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDOUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDO2dCQUNyQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUUvQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUE7O0FBMURZLFlBQVk7SUFIeEIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLFlBQVksQ0EwRHhCO1NBMURZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb251dCB9IGZyb20gJy4vZG9udXQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEb251dFNlcnZpY2Uge1xuXG4gIHB1YmxpYyBzdW06IG51bWJlcjtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBwdWJsaWMgZ2V0UHJvY2Vzc2VkRGF0YShkb251dERhdGE6IERvbnV0W10pOiBEb251dFtdIHtcbiAgICB0aGlzLnN1bSA9IHRoaXMuZmV0Y2hTdW0oZG9udXREYXRhKTtcbiAgICBkb251dERhdGEgPSB0aGlzLmNhbGN1bGF0ZVBlcmNlbnRhZ2VzKGRvbnV0RGF0YSwgdGhpcy5zdW0pO1xuICAgIGRvbnV0RGF0YSA9IHRoaXMuY2FsY3VsYXRlRGFzaEFycmF5cyhkb251dERhdGEpO1xuICAgIGRvbnV0RGF0YSA9IHRoaXMuZ2V0T2Zmc2V0cyhkb251dERhdGEpO1xuICAgIHJldHVybiBkb251dERhdGE7XG4gIH1cblxuXG4gIHByaXZhdGUgY2FsY3VsYXRlRGFzaEFycmF5cyhkb251dERhdGE6IERvbnV0W10pOiBEb251dFtdIHtcbiAgICBkb251dERhdGEuZm9yRWFjaChkYXRhID0+IHtcbiAgICAgIGRhdGEuc3Ryb2tlRGFzaGFycmF5ID0gdGhpcy5nZXREYXNoYXJyYXlTdHJpbmcoZGF0YS5wZXJjZW50YWdlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9udXREYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVQZXJjZW50YWdlcyhkb251dERhdGE6IERvbnV0W10sIHN1bTogbnVtYmVyKTogRG9udXRbXSB7XG4gICAgZG9udXREYXRhLmZvckVhY2goZGF0YSA9PiB7XG4gICAgICBkYXRhLnBlcmNlbnRhZ2UgPSB0aGlzLmdldFJvdW5kZWRQZXJjZW50YWdlKHBhcnNlSW50KGRhdGEudmFsdWUpLCBzdW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBkb251dERhdGE7XG4gIH1cblxuICBwcml2YXRlIGZldGNoU3VtKGRvbnV0RGF0YTogRG9udXRbXSk6IG51bWJlciB7XG4gICAgcmV0dXJuIGRvbnV0RGF0YS5tYXAoZCA9PiBwYXJzZUludChkLnZhbHVlKSkucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XG4gIH1cblxuICBwcml2YXRlIGdldFJvdW5kZWRQZXJjZW50YWdlKG51bWVyYXRvcjogbnVtYmVyLCBkZW5vbWluYXRvcjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIWRlbm9taW5hdG9yKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIChNYXRoLnJvdW5kKCgobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpICogMTAwKSAqIDEwKSAvIDEwKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGFzaGFycmF5U3RyaW5nKGRhc2g6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRhc2ggKyAnICcgKyAoMTAwIC0gZGFzaCk7XG4gIH1cblxuICBwcml2YXRlIGdldE9mZnNldHMoZG9udXREYXRhOiBEb251dFtdKTogRG9udXRbXSB7XG4gICAgbGV0IGZpcnN0T2Zmc2V0ID0gMDtcbiAgICBsZXQgc3VtVGlsbE5vdyA9IDA7XG4gICAgZG9udXREYXRhLmZvckVhY2goKGRhdGEsIGkpID0+IHtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGRhdGEuc3Ryb2tlT2Zmc2V0ID0gMDtcbiAgICAgICAgc3VtVGlsbE5vdyA9IGRhdGEucGVyY2VudGFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuc3Ryb2tlT2Zmc2V0ID0gMTAwIC0gc3VtVGlsbE5vdztcbiAgICAgICAgc3VtVGlsbE5vdyArPSBkYXRhLnBlcmNlbnRhZ2U7XG5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZG9udXREYXRhO1xuICB9XG59XG4iXX0=