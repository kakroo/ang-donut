{"version":3,"sources":["ng://donut/lib/donut.service.ts","ng://donut/lib/donut.component.html","ng://donut/lib/donut.component.ts","ng://donut/lib/donut.module.ts"],"names":["DonutService","prototype","getProcessedData","donutData","this","sum","fetchSum","calculatePercentages","calculateDashArrays","getOffsets","_this","forEach","data","strokeDasharray","getDasharrayString","percentage","getRoundedPercentage","parseInt","value","map","d","reduce","a","b","numerator","denominator","Math","round","dash","sumTillNow","i","strokeOffset","factory","ɵfac","providedIn","i0.ɵɵelement","i0.ɵɵstyleProp","ctx_r0","strokeWidth","data_r3","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","DonutComponent","donutService","Object","defineProperty","_showTotal","innerLabelText","ngOnInit","showLegend","fetchFakeData","name","color","core","ɵɵdirectiveInject","selectors","inputs","showTotal","innerLabel","decls","vars","consts","template","rf","ctx","i0.ɵɵnamespaceSVG","i0.ɵɵtemplate","i0.ɵɵnamespaceHTML","i0.ɵɵproperty","DonutModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Donut } from './donut.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DonutService {\n\n  public sum: number;\n  constructor() { }\n\n  public getProcessedData(donutData: Donut[]): Donut[] {\n    this.sum = this.fetchSum(donutData);\n    donutData = this.calculatePercentages(donutData, this.sum);\n    donutData = this.calculateDashArrays(donutData);\n    donutData = this.getOffsets(donutData);\n    return donutData;\n  }\n\n\n  private calculateDashArrays(donutData: Donut[]): Donut[] {\n    donutData.forEach(data => {\n      data.strokeDasharray = this.getDasharrayString(data.percentage);\n    });\n    return donutData;\n  }\n\n  private calculatePercentages(donutData: Donut[], sum: number): Donut[] {\n    donutData.forEach(data => {\n      data.percentage = this.getRoundedPercentage(parseInt(data.value), sum);\n    });\n    return donutData;\n  }\n\n  private fetchSum(donutData: Donut[]): number {\n    return donutData.map(d => parseInt(d.value)).reduce((a, b) => a + b, 0);\n  }\n\n  private getRoundedPercentage(numerator: number, denominator: number): number {\n    if (!denominator) {\n      return 0;\n    }\n    return (Math.round(((numerator / denominator) * 100) * 10) / 10);\n  }\n\n  private getDasharrayString(dash: number): string {\n    return dash + ' ' + (100 - dash);\n  }\n\n  private getOffsets(donutData: Donut[]): Donut[] {\n    let firstOffset = 0;\n    let sumTillNow = 0;\n    donutData.forEach((data, i) => {\n      if (i === 0) {\n        data.strokeOffset = 0;\n        sumTillNow = data.percentage;\n      } else {\n        data.strokeOffset = 100 - sumTillNow;\n        sumTillNow += data.percentage;\n\n      }\n    });\n    return donutData;\n  }\n}\n","<div>\r\n    <figure class='figure-class'>\r\n      <div class=\"figure-content\" fxFlex='57%'>\r\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" class=\"donut\" aria-labelledby=\"beers-title beers-desc\"\r\n          role=\"img\">\r\n          <circle class=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"#fff\" role=\"presentation\"></circle>\r\n          <circle class=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#d2d3d4\"\r\n            stroke-width=\"3\" role=\"presentation\"></circle>\r\n  \r\n          <circle *ngFor=\"let data of donutData;\" class=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\"\r\n            fill=\"transparent\" [style.stroke]=\"data.color\" [style.stroke-width]=\"strokeWidth\" [style.stroke-dasharray]=\"data.strokeDasharray\"\r\n            [style.stroke-dashoffset]=\"data.strokeOffset\" aria-labelledby=\"donut-segment-1-title donut-segment-1-desc\">\r\n          </circle>\r\n          <!-- unused 10% -->\r\n          <g class=\"chart-text\">\r\n            <text *ngIf='innerLabelText' x=\"50%\" y=\"50%\" class=\"chart-label\">\r\n              {{innerLabelText}}\r\n            </text>\r\n            <text *ngIf='_showTotal' x=\"50%\" y=\"50%\" class=\"chart-number\">\r\n              {{sum}}\r\n            </text>\r\n          </g>\r\n        </svg>\r\n      </div>\r\n      <figcaption class=\"figure-key\" fxFlex='43%'>\r\n  \r\n        <!-- <ul class=\"figure-key-list\" aria-hidden=\"true\" role=\"presentation\">\r\n          <li>\r\n            <span class=\"shape-circle shape-gray\"></span><b>Open </b>\r\n            <span class=\"donut-data-count-percentage\">\r\n              {{openWorkOrdersCount}}({{openPercentage}}%)\r\n            </span>\r\n          </li>\r\n          <li>\r\n            <span class=\"shape-circle shape-blue\"></span><b> Pend. Audit </b>\r\n            <span class=\"donut-data-count-percentage\">\r\n              {{auditPendingWorkOrdersCount}}({{pendingAuditPercentage}}%)\r\n            </span>\r\n          </li>\r\n          <li>\r\n            <span class=\"shape-circle shape-orange\"></span> <b>Audit In Prog.</b>\r\n            <span class=\"donut-data-count-percentage\">\r\n              {{auditInprogressWorkOrdersCount}}({{inProgressPercentage}}%)\r\n            </span>\r\n          </li>\r\n          <li>\r\n            <span class=\"shape-circle shape-red\"></span> <b>Needs Review</b>\r\n            <span class=\"donut-data-count-percentage\">\r\n              {{needsReviewWorkOrdersCount}}({{needsReviewPercentage}}%)\r\n            </span>\r\n          </li>\r\n          <li>\r\n            <span class=\"shape-circle shape-green\"></span> <b>Audit Cmplt </b>\r\n            <span class=\"donut-data-count-percentage\">\r\n              {{billingAuditCompletedWorkOrdersCount}}({{auditCompletePercentage}}%)\r\n            </span>\r\n          </li>\r\n        </ul> -->\r\n      </figcaption>\r\n    </figure>\r\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { DonutService } from './donut.service';\nimport { Donut } from './donut.model';\n\n@Component({\n  selector: 'ng-donut',\n  templateUrl: './donut.component.html',\n  styleUrls: ['./donut.component.css']\n})\nexport class DonutComponent implements OnInit {\n\n  public strokeWidth: number;\n  public innerLabelText: string;\n  public showLegend: boolean;\n  public sum: number;\n  public _showTotal: boolean;\n  // @Input() showTotal: boolean;\n  @Input() set showTotal(value: boolean) {\n    if (value && value === true) {\n      this._showTotal = true;\n    }\n    else {\n      this._showTotal = false;\n    }\n  }\n\n  @Input() donutData: Donut[];\n  // donutData: Donut[];\n\n  @Input() set innerLabel(value) {\n    if (value) {\n      this.innerLabelText = value;\n    }\n    else {\n      this.innerLabelText = null;\n    }\n  }\n\n\n  constructor(private donutService: DonutService) { }\n\n  ngOnInit() {\n    // this.fetchFakeData();\n    this.donutData = this.donutService.getProcessedData(this.donutData);\n    //Settings Start // Need to bind these to input variables later\n    this.strokeWidth = 3;\n    this.sum = this.donutService.sum;\n    this.showLegend = false;\n    //Settings End\n  }\n  fetchFakeData() {\n    this.donutData = [\n      { name: 'Red', value: '20', color: '#E25325' },\n      { name: 'Blue', value: '30', color: '#6064CF' },\n      { name: 'Black', value: '10', color: '#5A5C59' },\n      { name: 'Green', value: '40', color: '#50FD1D' }\n    ];\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { DonutComponent } from './donut.component';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [DonutComponent],\n  imports: [CommonModule],\n  exports: [DonutComponent]\n})\nexport class DonutModule { }\n"]}